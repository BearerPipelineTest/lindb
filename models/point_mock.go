// Code generated by MockGen. DO NOT EDIT.
// Source: ./point.go

// Package models is a generated GoMock package.
package models

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPoint is a mock of Point interface
type MockPoint struct {
	ctrl     *gomock.Controller
	recorder *MockPointMockRecorder
}

// MockPointMockRecorder is the mock recorder for MockPoint
type MockPointMockRecorder struct {
	mock *MockPoint
}

// NewMockPoint creates a new mock instance
func NewMockPoint(ctrl *gomock.Controller) *MockPoint {
	mock := &MockPoint{ctrl: ctrl}
	mock.recorder = &MockPointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoint) EXPECT() *MockPointMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockPoint) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPointMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPoint)(nil).Name))
}

// Timestamp mocks base method
func (m *MockPoint) Timestamp() int64 {
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Timestamp indicates an expected call of Timestamp
func (mr *MockPointMockRecorder) Timestamp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockPoint)(nil).Timestamp))
}

// Tags mocks base method
func (m *MockPoint) Tags() map[string]string {
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Tags indicates an expected call of Tags
func (mr *MockPointMockRecorder) Tags() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockPoint)(nil).Tags))
}

// Fields mocks base method
func (m *MockPoint) Fields() map[string]Field {
	ret := m.ctrl.Call(m, "Fields")
	ret0, _ := ret[0].(map[string]Field)
	return ret0
}

// Fields indicates an expected call of Fields
func (mr *MockPointMockRecorder) Fields() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fields", reflect.TypeOf((*MockPoint)(nil).Fields))
}

// TagsID mocks base method
func (m *MockPoint) TagsID() string {
	ret := m.ctrl.Call(m, "TagsID")
	ret0, _ := ret[0].(string)
	return ret0
}

// TagsID indicates an expected call of TagsID
func (mr *MockPointMockRecorder) TagsID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsID", reflect.TypeOf((*MockPoint)(nil).TagsID))
}

// TsID mocks base method
func (m *MockPoint) TsID() uint32 {
	ret := m.ctrl.Call(m, "TsID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// TsID indicates an expected call of TsID
func (mr *MockPointMockRecorder) TsID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TsID", reflect.TypeOf((*MockPoint)(nil).TsID))
}

// MockField is a mock of Field interface
type MockField struct {
	ctrl     *gomock.Controller
	recorder *MockFieldMockRecorder
}

// MockFieldMockRecorder is the mock recorder for MockField
type MockFieldMockRecorder struct {
	mock *MockField
}

// NewMockField creates a new mock instance
func NewMockField(ctrl *gomock.Controller) *MockField {
	mock := &MockField{ctrl: ctrl}
	mock.recorder = &MockFieldMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockField) EXPECT() *MockFieldMockRecorder {
	return m.recorder
}
